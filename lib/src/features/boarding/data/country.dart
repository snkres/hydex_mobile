import 'dart:convert';

import 'package:dart_mappable/dart_mappable.dart';
import 'package:flutter/services.dart' show rootBundle;

// Will be generated by dart_mappable
part 'country.mapper.dart';

@MappableClass()
class Country with CountryMappable {
  final String name;
  final String code;
  final String emoji;
  @MappableField(key: 'dial_code')
  final String dialCode;

  Country({
    required this.name,
    required this.code,
    required this.emoji,

    required this.dialCode,
  });
}

class CountryService {
  static List<Country> _countries = [];
  static bool _isLoaded = false;

  // Load countries from JSON file
  static Future<List<Country>> loadCountries() async {
    if (_isLoaded && _countries.isNotEmpty) {
      return _countries;
    }

    try {
      // Load JSON file from assets
      final String jsonString = await rootBundle.loadString(
        'packages/assets/json/country.json',
      );
      final List<dynamic> jsonList = json.decode(jsonString);

      // Convert JSON to Country objects using dart_mappable
      _countries = jsonList.map((json) => CountryMapper.fromMap(json)).toList();
      _isLoaded = true;

      return _countries;
    } catch (e) {
      print('Error loading countries: $e');
      return [];
    }
  }

  // Get all countries
  static Future<List<Country>> getAllCountries() async {
    if (!_isLoaded) {
      await loadCountries();
    }
    return _countries;
  }

  // Get default country (Egypt)
  static Future<Country> getDefaultCountry() async {
    final countries = await getAllCountries();

    return countries.firstWhere(
      (country) => country.code.toUpperCase() == 'EG',
    );
  }

  // Get country by code
  static Future<Country?> getCountryByCode(String code) async {
    final countries = await getAllCountries();
    try {
      return countries.firstWhere(
        (country) => country.code.toUpperCase() == code.toUpperCase(),
      );
    } catch (e) {
      return null;
    }
  }

  static Future<Country?> getCountryByName(String name) async {
    final countries = await getAllCountries();
    try {
      return countries.firstWhere(
        (country) => country.name.toLowerCase() == name.toLowerCase(),
      );
    } catch (e) {
      return null;
    }
  }

  static Future<List<Country>> searchCountries(String query) async {
    final countries = await getAllCountries();
    if (query.isEmpty) return countries;

    return countries
        .where(
          (country) => country.name.toLowerCase().contains(query.toLowerCase()),
        )
        .toList();
  }

  static Future<List<Country>> getCountriesSorted() async {
    final countries = await getAllCountries();
    final sortedCountries = List<Country>.from(countries);
    sortedCountries.sort((a, b) => a.name.compareTo(b.name));
    return sortedCountries;
  }
}
